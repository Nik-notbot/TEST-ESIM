// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–∞—Ö

exports.handler = async (event, context) => {
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS'
    };

    if (event.httpMethod === 'OPTIONS') {
        return { statusCode: 200, headers, body: '' };
    }

    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            headers,
            body: JSON.stringify({ error: 'Method not allowed' })
        };
    }

    try {
        const { orderData, notificationType = 'sale' } = JSON.parse(event.body);

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
        const telegramChatIds = process.env.TELEGRAM_CHAT_IDS || process.env.TELEGRAM_CHAT_ID;

        if (!telegramBotToken || !telegramChatIds) {
            console.log('Telegram not configured, skipping notification');
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify({ 
                    success: true, 
                    message: 'Telegram not configured, notification skipped' 
                })
            };
        }

        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ–¥–∏–Ω Chat ID, —Ç–∞–∫ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
        const chatIds = telegramChatIds.split(',').map(id => id.trim()).filter(id => id);
        
        if (chatIds.length === 0) {
            console.log('No valid chat IDs found');
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify({ 
                    success: true, 
                    message: 'No valid chat IDs found, notification skipped' 
                })
            };
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        let message = '';
        
        if (notificationType === 'sale') {
            message = formatSaleNotification(orderData);
        } else if (notificationType === 'error') {
            message = formatErrorNotification(orderData);
        } else {
            message = formatGenericNotification(orderData);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        const results = [];
        const errors = [];

        for (const chatId of chatIds) {
            try {
                console.log(`Sending notification to chat ID: ${chatId}`);
                
                const telegramResponse = await fetch(
                    `https://api.telegram.org/bot${telegramBotToken}/sendMessage`,
                    {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            chat_id: chatId,
                            text: message,
                            parse_mode: 'HTML',
                            disable_web_page_preview: true
                        })
                    }
                );

                if (!telegramResponse.ok) {
                    const errorText = await telegramResponse.text();
                    console.error(`Telegram API error for chat ${chatId}:`, errorText);
                    errors.push({ chatId, error: errorText });
                } else {
                    const telegramResult = await telegramResponse.json();
                    console.log(`Telegram notification sent to ${chatId}:`, telegramResult.message_id);
                    results.push({ 
                        chatId, 
                        messageId: telegramResult.message_id,
                        success: true 
                    });
                }
            } catch (error) {
                console.error(`Error sending to chat ${chatId}:`, error);
                errors.push({ chatId, error: error.message });
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const successCount = results.length;
        const errorCount = errors.length;

        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({ 
                success: successCount > 0,
                message: `Notifications sent: ${successCount} success, ${errorCount} errors`,
                results: results,
                errors: errors,
                total_recipients: chatIds.length
            })
        };

    } catch (error) {
        console.error('Error sending notification:', error);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ 
                error: 'Failed to send notification',
                message: error.message 
            })
        };
    }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ
function formatSaleNotification(orderData) {
    const {
        id: orderId,
        customer_email,
        customer_phone,
        amount,
        currency = 'RUB',
        esim_plans,
        created_at
    } = orderData;

    const orderTime = new Date(created_at).toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });

    return `üõí <b>–ù–û–í–ê–Ø –ü–†–û–î–ê–ñ–ê eSIM!</b>

üìã <b>–ó–∞–∫–∞–∑:</b> #${orderId.substring(0, 8)}
üí∞ <b>–°—É–º–º–∞:</b> ${amount} ${currency}
üìß <b>Email:</b> ${customer_email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${customer_phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üéØ <b>–¢–∞—Ä–∏—Ñ:</b> ${esim_plans?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${esim_plans?.data_gb || '?'} –ì–ë)
‚è∞ <b>–í—Ä–µ–º—è:</b> ${orderTime}

üí° <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π</i>`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
function formatErrorNotification(errorData) {
    return `‚ö†Ô∏è <b>–û–®–ò–ë–ö–ê –í –°–ò–°–¢–ï–ú–ï</b>

üîç <b>–¢–∏–ø:</b> ${errorData.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${errorData.message || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}

üö® <i>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã</i>`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function formatGenericNotification(data) {
    return `üì¢ <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´</b>

üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${data.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;
}